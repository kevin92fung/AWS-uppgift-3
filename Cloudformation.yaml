AWSTemplateFormatVersion: 2010-09-09
Description: Contact Form Serverless solution

Parameters:
  FromEmail:
    Type: String
    Description: "The email address to send from (must be verified in SES)."

  ToEmail:
    Type: String
    Description: "The recipient email address (must be verified in SES)."

Resources:
  # DynamoDB Table
  AddContactsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: Contacts
      AttributeDefinitions:
        - AttributeName: timestamp
          AttributeType: S
      KeySchema:
        - AttributeName: timestamp
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES

    # Create IAM Role for Lambda to access SES
  LambdaRoleToAccessSES:
    Type: AWS::IAM::Role
    Properties:
      RoleName: LambdaRoleToAccessSES
      Description: Role for Lambda to access SES with basic execution and full DynamoDB access
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: LambdaFullDynamoDBAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:PutItem
                  - dynamodb:UpdateItem
                  - dynamodb:BatchWriteItem
                  - dynamodb:Query
                  - dynamodb:Scan
                  - dynamodb:GetItem
                  - dynamodb:DescribeStream  # Add permissions to describe the stream
                  - dynamodb:GetRecords  # Add permissions to read records from the stream
                  - dynamodb:GetShardIterator  # Add permissions to get shard iterators
                  - dynamodb:ListStreams  # Add permissions to list streams
                Resource: "*"
        - PolicyName: AWSLambdaBasicExecutionRole
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: arn:aws:logs:your-region:your-account-id:log-group:/aws/lambda/*
        - PolicyName: AmazonSESFullAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ses:*
                Resource: "*"

  # Create IAM role for Lambda to access DynamoDB
  LambdaRoleToAccessDynamoDB:
    Type: AWS::IAM::Role
    Properties:
      RoleName: LambdaRoleToAccessDynamoDB
      Description: Role for Lambda to access DynamoDB with basic execution and full DynamoDB access
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: LambdaFullDynamoDBAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:PutItem
                  - dynamodb:UpdateItem
                  - dynamodb:BatchWriteItem
                  - dynamodb:Query
                  - dynamodb:Scan
                  - dynamodb:GetItem
                Resource: !GetAtt AddContactsTable.Arn
        - PolicyName: AWSLambdaBasicExecutionRole
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: arn:aws:logs:your-region:your-account-id:log-group:/aws/lambda/*

  # EmailIdentity for the From Email
  MyEmailIdentity1:
    Type: AWS::SES::EmailIdentity
    Properties:
      EmailIdentity: !Ref FromEmail

  # EmailIdentity for the To Email
  MyEmailIdentity2:
    Type: AWS::SES::EmailIdentity
    Properties:
      EmailIdentity: !Ref ToEmail

  # Lambda function to process the contact form submission
  AddContactInfoFunction:
    Type: AWS::Lambda::Function
    DependsOn:
      - LambdaRoleToAccessDynamoDB
      - AddContactsTable
    Properties:
      FunctionName: AddContactInfo
      Runtime: python3.12
      Role: !GetAtt LambdaRoleToAccessDynamoDB.Arn
      Handler: index.lambda_handler
      Code:
        ZipFile: |
          import json
          import boto3
          from datetime import datetime

          def lambda_handler(event, context):
            db = boto3.resource('dynamodb')
            table = db.Table('Contacts')

            dateTime = (datetime.now()).strftime("%Y-%m-%d %H:%M:%S")

            try:
                payload = json.loads(event['body'])

                table.put_item(
                  Item={
                    'timestamp': dateTime,
                    'name': payload['name'],
                    'email': payload['email'],
                    'message': payload['msg']
                  }
                )

                return {
                    'statusCode': 200,
                    'body': json.dumps('Successfully saved contact info!'),
                    'headers': {
                        "Access-Control-Allow-Origin": "*",
                        "Access-Control-Allow-Credentials": True,
                    }
                }

            except Exception as e:
                return {
                    'statusCode': 400,
                    'body': json.dumps(f'Error saving contact info: {str(e)}'),
                    'headers': {
                        "Access-Control-Allow-Origin": "*",
                        "Access-Control-Allow-Credentials": True,
                    }
                }
      Environment:
        Variables:
          TABLE_NAME: !Ref AddContactsTable


  # API Gateway to integrate with Lambda function
  ApiGatewayRestApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: "ContactsAPI"
      Description: "API Gateway for AddContactInfo Lambda integration"
      EndpointConfiguration:
        Types:
          - REGIONAL

  ApiGatewayResourceAddContactInfo:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt ApiGatewayRestApi.RootResourceId
      PathPart: "AddContactInfo"
      RestApiId: !Ref ApiGatewayRestApi

  ApiGatewayMethodAny:
    Type: AWS::ApiGateway::Method
    DependsOn:
      - AddContactInfoFunction
      - ApiGatewayResourceAddContactInfo
    Properties:
      RestApiId: !Ref ApiGatewayRestApi
      ResourceId: !Ref ApiGatewayResourceAddContactInfo
      HttpMethod: ANY
      AuthorizationType: NONE
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${AddContactInfoFunction.Arn}/invocations
      MethodResponses:
        - StatusCode: '200'

  ApiGatewayMethodOPTIONS:
    Type: AWS::ApiGateway::Method
    DependsOn:
      - ApiGatewayMethodAny
    Properties:
      RestApiId: !Ref ApiGatewayRestApi
      ResourceId: !Ref ApiGatewayResourceAddContactInfo
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      MethodResponses:
        - StatusCode: '200'
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
            method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
            method.response.header.Access-Control-Allow-Origin: "'*'"
          ResponseModels:
            application/json: "Empty"
      Integration:
        Type: MOCK
        IntegrationResponses:
          - StatusCode: '200'
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        RequestTemplates:
          application/json: '{"statusCode": 200}'

  # Lambda Permission to allow API Gateway to invoke the Function
  LambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref AddContactInfoFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGatewayRestApi}/*/*/AddContactInfo

  # API Gateway Deployment
  ApiGatewayDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - ApiGatewayMethodAny
    Properties:
      RestApiId: !Ref ApiGatewayRestApi
      StageName: default

  # SendContactInfoEmail Function
  SendContactInfoEmailFunction:
    Type: AWS::Lambda::Function
    DependsOn:
      - LambdaRoleToAccessSES
      - AddContactsTable
      - MyEmailIdentity1
      - MyEmailIdentity2
    Properties:
      FunctionName: SendContactInfoEmail
      Runtime: python3.12
      Role: !GetAtt LambdaRoleToAccessSES.Arn
      Handler: index.lambda_handler
      Code:
        ZipFile: |
          import json
          import boto3
          import os
          from datetime import datetime

          # Initialize the DynamoDB client
          dynamodb = boto3.resource('dynamodb')
          table = dynamodb.Table(os.environ['TABLE_NAME'])  # Get the table name from environment variable

          def lambda_handler(event, context):
              # Scan the DynamoDB table
              result = table.scan()
              items = result['Items']

              # Sort the items by timestamp in descending order
              # Ensure 'timestamp' is parsed into a datetime object for proper comparison
              items.sort(key=lambda x: datetime.strptime(x['timestamp'], '%Y-%m-%d %H:%M:%S'), reverse=True)

              # Initialize SES client (uses Lambda's region by default)
              ses = boto3.client('ses')

              # Build the HTML table body for the email
              body = """
              <html>
              <head></head>
              <body>
              <h3>Contact Information</h3>
              <table border="1">
                  <tr>
                      <th>Name</th>
                      <th>Email</th>
                      <th>Message</th>
                      <th>Timestamp</th>
                  </tr>
              """
              
              # Loop through the items and create table rows
              for item in items:
                  body += f"""
                  <tr>
                      <td>{item['name']}</td>
                      <td>{item['email']}</td>
                      <td>{item['message']}</td>
                      <td>{item['timestamp']}</td>
                  </tr>
                  """
              
              # Closing HTML tags
              body += """
              </table>
              </body>
              </html>
              """

              # Send email using SES
              ses.send_email(
                  Source=os.environ['FROM_EMAIL'],  # Reference the environment variable for the sender email
                  Destination={
                      'ToAddresses': [
                          os.environ['TO_EMAIL']  # Reference the environment variable for the recipient email
                      ]
                  },
                  Message={
                      'Subject': {
                          'Data': 'Contact Info Notification',
                          'Charset': 'UTF-8'
                      },
                      'Body': {
                          'Html': {  # Specify that we're sending HTML content
                              'Data': body,
                              'Charset': 'UTF-8'
                          }
                      }
                  }
              )

              return {
                  'statusCode': 200,
                  'body': json.dumps('Successfully sent email from Lambda using Amazon SES')
              }

      Environment:
        Variables:
          TABLE_NAME: !Ref AddContactsTable  # Reference DynamoDB table from CloudFormation
          FROM_EMAIL: !Ref MyEmailIdentity1  # Reference the verified sender email identity
          TO_EMAIL: !Ref MyEmailIdentity2  # Reference the recipient email identity

  # Enable SendContactInfoEmailFunction to be triggered by DynamoDB stream
  SendContactInfoEmailFunctionDynamoDBTrigger:
    Type: AWS::Lambda::EventSourceMapping
    DependsOn: SendContactInfoEmailFunction
    Properties:
      BatchSize: 100
      EventSourceArn: !GetAtt AddContactsTable.StreamArn
      FunctionName: !Ref SendContactInfoEmailFunction
      StartingPosition: LATEST
      Enabled: true
      BisectBatchOnFunctionError: false 
      TumblingWindowInSeconds: 0

  # S3 Bucket with a unique name including account ID, region, and stack name
  ContactFormBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub 'contact-form-bucket-${AWS::AccountId}-${AWS::Region}-${AWS::StackName}'
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        IgnorePublicAcls: false
        BlockPublicPolicy: false  
        RestrictPublicBuckets: false  
  
  #ContactFormBucketPolicy
  ContactFormBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref ContactFormBucket
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Sid: PublicAccessGetObject
            Effect: Allow
            Principal: "*"  
            Action: "s3:GetObject"
            Resource: 
              - !Sub "${ContactFormBucket.Arn}/*"  
  
  # IAM Role for Lambda Function to Access S3
  LambdaS3UploadRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "LambdaS3UploadRole-${AWS::StackName}"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: 
                - lambda.amazonaws.com
            Action: "sts:AssumeRole"
      Policies:
        - PolicyName: S3AccessPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "s3:PutObject"
                  - "s3:PutObjectAcl"
                  - "s3:GetObject"
                Resource: 
                  - !Sub "${ContactFormBucket.Arn}/*"

  # Lambda function to handle file upload with CloudFormation response
  S3LambdaFunction:
    Type: AWS::Lambda::Function
    DependsOn:
      - LambdaS3UploadRole
      - ContactFormBucket
      - ApiGatewayRestApi
    Properties:
      FunctionName: UploadHtmlFunction
      Handler: index.lambda_handler
      Role: !GetAtt LambdaS3UploadRole.Arn
      Runtime: python3.13
      Code:
        ZipFile: |
          import boto3
          import os
          import json
          import urllib.request

          s3_client = boto3.client('s3')

          # Function to send a response to CloudFormation
          def send_response(event, context, status, response_data):
              response_url = event['ResponseURL']
              response_body = json.dumps({
                  'Status': status,
                  'Reason': 'See the details in CloudWatch Log Stream: ' + context.log_stream_name,
                  'PhysicalResourceId': context.log_stream_name,
                  'StackId': event['StackId'],
                  'RequestId': event['RequestId'],
                  'LogicalResourceId': event['LogicalResourceId'],
                  'Data': response_data
              })

              headers = {
                  'content-type': '',
                  'content-length': str(len(response_body))
              }

              try:
                  request = urllib.request.Request(
                      response_url,
                      data=response_body.encode('utf-8'),
                      headers=headers,
                      method='PUT'
                  )
                  urllib.request.urlopen(request)
                  print("Response sent to CloudFormation successfully.")
              except Exception as e:
                  print(f"Failed to send response: {e}")

          # Lambda handler function
          def lambda_handler(event, context):
              print("Received event:", json.dumps(event))

              # Define bucket name and file content
              bucket_name = os.environ.get('BUCKET_NAME', 'default-bucket-name')
              api_id = os.environ.get('API_ID', '')
              api_region = os.environ.get('API_REGION', '')
              api_stage = os.environ.get('API_STAGE', 'default')

              # Construct the API endpoint URL
              api_endpoint = f"https://{api_id}.execute-api.{api_region}.amazonaws.com/{api_stage}/AddContactInfo"
              
              html_content = f"""
              <!DOCTYPE html>
              <html>
              <head>
                  <title>Contact Form</title>
                  <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.5.0/css/bootstrap.min.css">
              </head>
              <body>
                  <div class="container">
                      <h1>Contact Form</h1>
                      <form id="contactForm" method="POST">
                          <div class="form-group">
                              <label for="name">Name:</label>
                              <input type="text" class="form-control" id="name" name="name" required>
                          </div>
                          <div class="form-group">
                              <label for="email">Email:</label>
                              <input type="email" class="form-control" id="email" name="email" required>
                          </div>
                          <div class="form-group">
                              <label for="msg">Message:</label>
                              <textarea class="form-control" id="msg" name="msg" rows="4" cols="50" required></textarea>
                          </div>
                          <input type="submit" class="btn btn-primary" value="Submit">
                      </form>
                  </div>
                  <script src="https://code.jquery.com/jquery-3.5.1.slim.min.js"></script>
                  <script src="https://cdn.jsdelivr.net/npm/bootstrap@4.5.0/dist/js/bootstrap.min.js"></script>
                  <script>
                      const ApiUrl = "{api_endpoint}";
                      document.getElementById("contactForm").addEventListener("submit", function(event) {{
                          event.preventDefault();
                          var formData = {{
                              name: document.getElementById("name").value,
                              email: document.getElementById("email").value,
                              msg: document.getElementById("msg").value
                          }};
                          fetch(ApiUrl, {{
                              method: "POST",
                              body: JSON.stringify(formData)
                          }})
                          .then(response => {{
                              if (response.ok) {{
                                  alert("Form submitted successfully");
                              }} else {{
                                  alert("Form submission failed");
                              }}
                          }})
                          .catch(error => {{
                              console.error("An error occurred:", error);
                          }});
                      }});
                  </script>
              </body>
              </html>
              """

              try:
                  # Upload the HTML content to S3 bucket
                  s3_client.put_object(
                      Bucket=bucket_name,
                      Key='index.html',
                      Body=html_content,
                      ContentType='text/html'
                  )
                  print(f"File uploaded successfully to {bucket_name}/index.html")

                  # Send a success response to CloudFormation
                  send_response(event, context, 'SUCCESS', {'Message': 'index.html uploaded successfully'})

              except Exception as e:
                  print(f"Error uploading file: {e}")
                  # Send a failure response to CloudFormation
                  send_response(event, context, 'FAILED', {'Message': str(e)})

      Environment:
        Variables:
          BUCKET_NAME: !Ref ContactFormBucket
          API_ID: !Ref ApiGatewayRestApi
          API_REGION: !Ref "AWS::Region"
          API_STAGE: "default"


  # Custom resource to invoke Lambda function
  InvokeHtmlUpload:
    Type: AWS::CloudFormation::CustomResource
    DependsOn:
      - ContactFormBucket
      - ApiGatewayRestApi
    Properties:
      ServiceToken: !GetAtt S3LambdaFunction.Arn